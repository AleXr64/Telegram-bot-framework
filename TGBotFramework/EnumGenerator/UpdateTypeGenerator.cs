using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace EnumGenerator;

[Generator]
public class UpdateTypeGenerator: IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Combine the compilation with a placeholder for triggering the generator
        var compilationProvider = context.CompilationProvider;

        context.RegisterSourceOutput(compilationProvider, (sourceContext, compilation) =>
            {
                // Find the "Telegram.Bot.Types.Enums.UpdateType" enum in the compilation
                var updateTypeEnum = compilation.GetTypeByMetadataName("Telegram.Bot.Types.Enums.UpdateType");

                if(updateTypeEnum == null)
                {
                    // Emit a diagnostic if the enum could not be found
                    sourceContext.ReportDiagnostic(Diagnostic.Create(
                                                       new DiagnosticDescriptor(
                                                           "FG001",
                                                           "UpdateType Enum Not Found",
                                                           "The UpdateType enum could not be found in the referenced assemblies.",
                                                           "UpdateTypeGenerator",
                                                           DiagnosticSeverity.Warning,
                                                           isEnabledByDefault: true),
                                                       Location.None));
                    return;
                }

                // Generate the flagged enum source code
                var flaggedEnumSource = GenerateFlaggedEnum(updateTypeEnum);
                sourceContext.AddSource("UpdateType.g.cs", SourceText.From(flaggedEnumSource, Encoding.UTF8));
            });
    }

    private static string GenerateFlaggedEnum(INamedTypeSymbol enumSymbol)
    {
        // Collect enum values
        var enumValues = enumSymbol.GetMembers()
                                   .OfType<IFieldSymbol>()
                                   .Where(field => field.HasConstantValue)
                                   .Select(field => new { Name = field.Name, Value = (int)field.ConstantValue! })
                                   .ToList();
        
        // Generate the source code for the flagged enum
        var sb = new StringBuilder();
        sb.AppendLine("""
                      // <auto-generated />
                      using System;
                      namespace BotFramework.Enums;
                      [Flags]
                      public enum UpdateFlag : ulong
                      {
                      """);


        foreach(var (name, index) in enumValues.Select((item, index) => (item.Name, item.Value)))
        {
            if(name == "Unknown")
                continue;
            
            sb.AppendLine($"    {name} = 1UL << {index},");
        }

        sb.AppendLine("""
                          All = ~0UL
                      }
                      """);
        return sb.ToString();
    }
}